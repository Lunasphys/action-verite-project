{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Lauri/WebstormProjects/action-verite-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nimport * as i2 from \"./cards.service\";\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor(storageService, cardsService) {\n      this.storageService = storageService;\n      this.cardsService = cardsService;\n      this.gameState = new BehaviorSubject({\n        players: [],\n        currentPlayerIndex: 0,\n        mode: null,\n        consecutiveTruths: 0,\n        drawnCards: new Set()\n      });\n      this.gameState$ = this.gameState.asObservable();\n    }\n    initGame(players, mode) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const newState = {\n          players,\n          currentPlayerIndex: 0,\n          mode,\n          consecutiveTruths: 0,\n          drawnCards: new Set()\n        };\n        yield _this.storageService.savePlayers(players);\n        _this.gameState.next(newState);\n      })();\n    }\n    getCurrentPlayer() {\n      const state = this.gameState.value;\n      if (state.players.length === 0) return null;\n      return state.players[state.currentPlayerIndex];\n    }\n    drawCard(type) {\n      const state = this.gameState.value;\n      const currentPlayer = this.getCurrentPlayer();\n      if (!currentPlayer || !state.mode) return null;\n      const card = this.cardsService.drawRandomCard(state.mode.id, type, currentPlayer, state.drawnCards);\n      if (card) {\n        // Marque la carte comme tirée si non répétable\n        if (!card.repetable) {\n          state.drawnCards.add(card.id);\n        }\n        // Met à jour le compteur de vérités consécutives\n        if (type === 'vérité') {\n          state.consecutiveTruths++;\n        } else {\n          state.consecutiveTruths = 0;\n        }\n        this.gameState.next({\n          ...state\n        });\n      }\n      return card;\n    }\n    nextPlayer() {\n      const state = this.gameState.value;\n      const nextIndex = (state.currentPlayerIndex + 1) % state.players.length;\n      this.gameState.next({\n        ...state,\n        currentPlayerIndex: nextIndex,\n        consecutiveTruths: 0,\n        drawnCards: new Set() // Réinitialise pour le nouveau joueur\n      });\n    }\n    canChooseTruth() {\n      const state = this.gameState.value;\n      return state.consecutiveTruths < 3;\n    }\n    getConsecutiveTruths() {\n      return this.gameState.value.consecutiveTruths;\n    }\n    resetGame() {\n      this.gameState.next({\n        players: [],\n        currentPlayerIndex: 0,\n        mode: null,\n        consecutiveTruths: 0,\n        drawnCards: new Set()\n      });\n    }\n    static {\n      this.ɵfac = function GameService_Factory(t) {\n        return new (t || GameService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.CardsService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: GameService,\n        factory: GameService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}