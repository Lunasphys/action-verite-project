{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CardsService = /*#__PURE__*/(() => {\n  class CardsService {\n    constructor() {\n      this.cards = [\n      // Mode Classique\n      {\n        id: '1',\n        mode: 'classique',\n        type: 'vérité',\n        description: 'Joueur 1 doit avouer un secret gênant',\n        genreJoueur1: 'Tous',\n        repetable: false\n      }, {\n        id: '2',\n        mode: 'classique',\n        type: 'vérité',\n        description: 'Joueur 1 doit dire ce qui lui plaît le plus chez Joueur 2',\n        genreJoueur1: 'Tous',\n        genreJoueur2: 'Tous',\n        repetable: false\n      }, {\n        id: '3',\n        mode: 'classique',\n        type: 'action',\n        description: 'Joueur 1 doit chanter une chanson',\n        genreJoueur1: 'Tous',\n        repetable: false,\n        timer: 30\n      }, {\n        id: '4',\n        mode: 'classique',\n        type: 'action',\n        description: 'Joueur 1 doit faire 20 pompes',\n        genreJoueur1: 'Homme',\n        repetable: false\n      }, {\n        id: '5',\n        mode: 'classique',\n        type: 'action',\n        description: 'Joueur 1 doit faire une danse de 15 secondes',\n        genreJoueur1: 'Tous',\n        repetable: false,\n        timer: 15,\n        photoObligatoire: true\n      }, {\n        id: '6',\n        mode: 'classique',\n        type: 'vérité',\n        description: 'Joueur 1 doit dire son plus gros mensonge',\n        genreJoueur1: 'Tous',\n        repetable: false\n      }, {\n        id: '7',\n        mode: 'classique',\n        type: 'action',\n        description: 'Joueur 1 doit imiter un animal pendant 20 secondes',\n        genreJoueur1: 'Tous',\n        repetable: false,\n        timer: 20,\n        photoObligatoire: true\n      }, {\n        id: '8',\n        mode: 'classique',\n        type: 'vérité',\n        description: 'Joueur 1 doit révéler sa pire habitude',\n        genreJoueur1: 'Tous',\n        repetable: false\n      },\n      // Mode En soirée\n      {\n        id: '9',\n        mode: 'soiree',\n        type: 'action',\n        description: 'Joueur 1 doit boire un verre cul sec',\n        genreJoueur1: 'Tous',\n        repetable: false,\n        timer: 10\n      }, {\n        id: '10',\n        mode: 'soiree',\n        type: 'vérité',\n        description: 'Joueur 1 doit raconter son moment le plus embarrassant',\n        genreJoueur1: 'Tous',\n        repetable: false\n      }, {\n        id: '11',\n        mode: 'soiree',\n        type: 'action',\n        description: 'Joueur 1 doit danser avec Joueur 2 pendant 30 secondes',\n        genreJoueur1: 'Femme',\n        genreJoueur2: 'Homme',\n        repetable: false,\n        timer: 30,\n        photoObligatoire: true\n      }, {\n        id: '12',\n        mode: 'soiree',\n        type: 'vérité',\n        description: 'Joueur 1 doit dire qui est la personne la plus attirante ici',\n        genreJoueur1: 'Tous',\n        repetable: false\n      }, {\n        id: '13',\n        mode: 'soiree',\n        type: 'action',\n        description: 'Joueur 1 doit faire un limbo',\n        genreJoueur1: 'Tous',\n        repetable: false,\n        photoObligatoire: true\n      },\n      // Mode hot\n      {\n        id: '12',\n        mode: 'hot',\n        type: 'vérité',\n        description: 'Joueur 1 doit demander à joueur 2 s\\'il préfère perdre son pénis ou ses bras',\n        genreJoueur1: 'Tous',\n        genreJoueur2: 'Homme',\n        repetable: false,\n        timer: 30\n      }];\n    }\n    getCardsByMode(mode) {\n      return this.cards.filter(card => card.mode === mode);\n    }\n    getCardById(id) {\n      return this.cards.find(card => card.id === id);\n    }\n    drawRandomCard(mode, type, currentPlayer, excludedIds) {\n      const availableCards = this.cards.filter(card => {\n        // Vérifie le mode\n        if (card.mode !== mode) return false;\n        // Vérifie le type\n        if (card.type !== type) return false;\n        // Vérifie le genre du joueur\n        if (card.genreJoueur1 !== 'Tous' && card.genreJoueur1 !== currentPlayer.genre) return false;\n        // Vérifie si la carte a déjà été tirée (sauf si repetable)\n        if (!card.repetable && excludedIds.has(card.id)) return false;\n        return true;\n      });\n      if (availableCards.length === 0) {\n        return null;\n      }\n      const randomIndex = Math.floor(Math.random() * availableCards.length);\n      return availableCards[randomIndex];\n    }\n    replaceVariables(card, currentPlayer, otherPlayers) {\n      let description = card.description;\n      // Remplace Joueur 1 par le pseudo du joueur actuel\n      description = description.replace(/Joueur 1/g, currentPlayer.pseudo);\n      // Remplace Joueur 2 si nécessaire\n      if (description.includes('Joueur 2')) {\n        const compatiblePlayers = otherPlayers.filter(p => !card.genreJoueur2 || card.genreJoueur2 === 'Tous' || p.genre === card.genreJoueur2);\n        if (compatiblePlayers.length > 0) {\n          const randomPlayer = compatiblePlayers[Math.floor(Math.random() * compatiblePlayers.length)];\n          description = description.replace(/Joueur 2/g, randomPlayer.pseudo);\n        }\n      }\n      return description;\n    }\n    static {\n      this.ɵfac = function CardsService_Factory(t) {\n        return new (t || CardsService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CardsService,\n        factory: CardsService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CardsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}